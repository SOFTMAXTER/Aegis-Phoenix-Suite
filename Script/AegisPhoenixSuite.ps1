<#
.SYNOPSIS
    Suite definitiva de optimizacion, gestion, seguridad y diagnostico para Windows 11 y 10.
.DESCRIPTION
    Aegis Phoenix Suite v1.0 by SOFTMAXTER es la herramienta PowerShell definitiva. Con una estructura de submenus y un
    sistema de deteccion de bloatware dinamico, permite maximizar el rendimiento, reforzar la seguridad, gestionar
    software y drivers, y personalizar la experiencia de usuario.
    Requiere ejecucion como Administrador.
.AUTHOR
    SOFTMAXTER
.VERSION
    1.0
#>

# --- Verificacion de Privilegios de Administrador ---
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Warning "Este script necesita ser ejecutado como Administrador."
    Write-Host "Por favor, cierra esta ventana, haz clic derecho en el archivo del script y selecciona 'Ejecutar como Administrador'."
    Read-Host "Presiona Enter para salir."
    exit
}

# --- FUNCIONES DE ACCION (Las herramientas que hacen el trabajo) ---

function Create-RestorePoint {
    Write-Host "`n[+] Creando un punto de restauracion del sistema..." -ForegroundColor Yellow
    try {
        Checkpoint-Computer -Description "AegisPhoenixSuite_v10.2_$(Get-Date -Format 'yyyy-MM-dd_HH-mm')" -RestorePointType "MODIFY_SETTINGS"
        Write-Host "[OK] Punto de restauracion creado exitosamente." -ForegroundColor Green
    } catch { Write-Error "No se pudo crear el punto de restauracion. Error: $_" }
    Read-Host "`nPresiona Enter para volver..."
}

function Disable-UnnecessaryServices {
    Write-Host "`n[+] Desactivando servicios innecesarios (Modo Estandar)..." -ForegroundColor Yellow
    $servicesToDisable = @("Fax", "PrintSpooler", "RemoteRegistry", "SysMain", "TouchKeyboardAndHandwritingPanelService", "WalletService", "dmwappushservice", "DusmSvc", "DsSvc", "lfsvc")
    foreach ($s in $servicesToDisable) {
        $svc = Get-Service -Name $s -ErrorAction SilentlyContinue
        if ($svc) {
            if ($svc.Status -eq 'Running') { Stop-Service -Name $s -Force -ErrorAction SilentlyContinue }
            Set-Service -Name $s -StartupType Disabled -ErrorAction SilentlyContinue; Write-Host "[OK] Servicio '$s' deshabilitado." -ForegroundColor Green
        }
    }
    Write-Host "`n[+] Optimizacion de servicios estandar completada." -ForegroundColor Green
    Read-Host "`nPresiona Enter para volver..."
}

function Show-OptionalServicesMenu {
    $serviceChoice = ''; do { Clear-Host; Write-Host "Desactivar Servicios Opcionales (Avanzado)" -ForegroundColor DarkCyan; Write-Host "ADVERTENCIA: Desactiva estos servicios solo si sabes que no los necesitas." -ForegroundColor Yellow; Write-Host ""; Write-Host "   [1] Desactivar Servicios de Escritorio Remoto (TermService)"; Write-Host "   [2] Desactivar Uso Compartido de Red de Windows Media Player (WMPNetworkSvc)"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $serviceChoice = Read-Host "Selecciona una opcion"; switch ($serviceChoice) { '1' { if ((Read-Host "Estas seguro? (S/N)").ToUpper() -eq 'S') { Set-Service -Name "TermService" -StartupType Disabled -ErrorAction SilentlyContinue; Write-Host "[OK] Servicios de Escritorio Remoto desactivados." -ForegroundColor Green } } '2' { if ((Read-Host "Estas seguro? (S/N)").ToUpper() -eq 'S') { Set-Service -Name "WMPNetworkSvc" -StartupType Disabled -ErrorAction SilentlyContinue; Write-Host "[OK] Servicio de Uso Compartido de Red de WMP desactivado." -ForegroundColor Green } } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($serviceChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($serviceChoice -ne 'V')
}

function Show-CleaningMenu {
    $cleanChoice = ''; do { Clear-Host; Write-Host "Modulo de Limpieza Profunda" -ForegroundColor DarkCyan; Write-Host "Selecciona el nivel de limpieza que deseas ejecutar."; Write-Host ""; Write-Host "   [1] Limpieza Estandar (Archivos temporales)"; Write-Host "   [2] Limpieza Profunda (Estandar + Papelera, Miniaturas, Informes de Error)"; Write-Host "   [3] Limpieza Avanzada de Caches (DirectX, Optimizacion de Entrega)"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $cleanChoice = Read-Host "Selecciona una opcion"; switch ($cleanChoice) { '1' { Write-Host "`n[+] Ejecutando Limpieza Estandar..." -ForegroundColor Yellow; Get-ChildItem -Path $env:TEMP, "$env:windir\Temp" -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue; Write-Host "[OK] Archivos temporales eliminados." -ForegroundColor Green } '2' { Write-Host "`n[+] Ejecutando Limpieza Profunda..." -ForegroundColor Yellow; Get-ChildItem -Path $env:TEMP, "$env:windir\Temp" -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue; Write-Host "[OK] Archivos temporales eliminados."; Clear-RecycleBin -Force -ErrorAction SilentlyContinue; Write-Host "[OK] Papelera de Reciclaje vaciada."; Stop-Process -Name explorer -Force -ErrorAction SilentlyContinue; Remove-Item -Path "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue; Start-Process explorer; Write-Host "[OK] Cache de Miniaturas limpiada."; Remove-Item -Path "$env:ProgramData\Microsoft\Windows\WER\ReportQueue\*" -Recurse -Force -ErrorAction SilentlyContinue; Write-Host "[OK] Informes de Errores eliminados." -ForegroundColor Green } '3' { Write-Warning "Opcion para usuarios avanzados."; if ((Read-Host "Deseas continuar? (S/N)").ToUpper() -eq 'S') { Remove-Item -Path "$env:LOCALAPPDATA\D3DSCache\*" -Recurse -Force -ErrorAction SilentlyContinue; Write-Host "[OK] Cache de Shaders de DirectX eliminada."; Remove-Item -Path "$env:windir\SoftwareDistribution\DeliveryOptimization\*" -Recurse -Force -ErrorAction SilentlyContinue; Write-Host "[OK] Archivos de Optimizacion de Entrega eliminados." -ForegroundColor Green } } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($cleanChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($cleanChoice -ne 'V')
}

function Show-BloatwareMenu {
    Write-Host "`n[+] Escaneando aplicaciones de Microsoft no esenciales..." -ForegroundColor Yellow
    $essentialAppsBlocklist = @("Microsoft.WindowsStore", "Microsoft.WindowsCalculator", "Microsoft.Windows.Photos", "Microsoft.Windows.Camera", "Microsoft.SecHealthUI", "Microsoft.UI.Xaml", "Microsoft.VCLibs", "Microsoft.NET.Native", "Microsoft.WebpImageExtension", "Microsoft.HEIFImageExtension", "Microsoft.VP9VideoExtensions", "Microsoft.ScreenSketch", "Microsoft.WindowsTerminal", "Microsoft.Paint", "Microsoft.WindowsNotepad")
    $allMicrosoftApps = Get-AppxPackage -AllUsers | Where-Object { $_.Publisher -like "*Microsoft*" -and $_.IsFramework -eq $false -and $_.NonRemovable -eq $false }
    $apps = @(); foreach ($app in $allMicrosoftApps) { $isEssential = $false; foreach ($essential in $essentialAppsBlocklist) { if ($app.Name -like "*$essential*") { $isEssential = $true; break } }; if (-not $isEssential) { $apps += [PSCustomObject]@{Name=$app.Name; PackageName=$app.PackageFullName; Selected=$false} } }; if ($apps.Count -eq 0) { Write-Host "`n[OK] No se encontro bloatware adicional para eliminar." -ForegroundColor Green; Read-Host "`nPresiona Enter para volver..."; return }
    $choice = ''; while ($choice -ne 'E' -and $choice -ne 'V') { Clear-Host; Write-Host "Eliminacion Selectiva de Bloatware (Dinamico)" -ForegroundColor DarkCyan; Write-Host "Escribe el numero para marcar/desmarcar una aplicacion."; for ($i = 0; $i -lt $apps.Count; $i++) { $status = if ($apps[$i].Selected) { "[X]" } else { "[ ]" }; Write-Host ("   [{0,2}] {1} {2}" -f ($i+1), $status, $apps[$i].Name) }; Write-Host ""; Write-Host "--- Acciones ---" -ForegroundColor Yellow; Write-Host "   [E] Eliminar seleccionados"; Write-Host "   [T] Seleccionar Todos"; Write-Host "   [N] No seleccionar ninguno"; Write-Host "   [V] Volver..." -ForegroundColor Red; $choice = (Read-Host "`nSelecciona una opcion").ToUpper(); if ($choice -match '^\d+$' -and [int]$choice -ge 1 -and [int]$choice -le $apps.Count) { $index = [int]$choice - 1; $apps[$index].Selected = -not $apps[$index].Selected } elseif ($choice -eq 'T') { $apps.ForEach({$_.Selected = $true}) } elseif ($choice -eq 'N') { $apps.ForEach({$_.Selected = $false}) } }; if ($choice -eq 'E') { $appsToUninstall = $apps | Where-Object { $_.Selected }; if ($appsToUninstall.Count -eq 0) { Write-Host "`nNo se selecciono ninguna aplicacion." -ForegroundColor Yellow } else { Write-Host "`n[+] Eliminando aplicaciones seleccionadas..." -ForegroundColor Yellow; foreach ($app in $appsToUninstall) { Write-Host " - Eliminando $($app.Name)..."; Remove-AppxPackage -Package $app.PackageName -AllUsers -ErrorAction SilentlyContinue; $provisionedPackage = Get-AppxProvisionedPackage -Online | Where-Object { $_.DisplayName -eq $app.Name }; if ($provisionedPackage) { foreach ($pkg in $provisionedPackage) { Write-Host "   - Eliminando paquete provisionado: $($pkg.PackageName)" -ForegroundColor Gray; Remove-AppxProvisionedPackage -Online -PackageName $pkg.PackageName -ErrorAction SilentlyContinue } } }; Write-Host "`n[OK] Proceso completado." -ForegroundColor Green } }; Read-Host "`nPresiona Enter para volver..."
}

function Repair-SystemFiles { Write-Host "`nReparando archivos..."; sfc /scannow; DISM /Online /Cleanup-Image /RestoreHealth; Read-Host "`nPresiona Enter para volver..." }
function Clear-SystemCaches { Write-Host "`nLimpiando caches..."; ipconfig /flushdns; wsreset.exe -q; Write-Host "[OK] Caches de DNS y Tienda limpiadas."; Read-Host "`nPresiona Enter para volver..." }
function Optimize-Drives { Write-Host "`nOptimizando unidades..."; Optimize-Volume -DriveLetter C -Verbose; Read-Host "`nPresiona Enter para volver..." }
function Generate-SystemReport { $parentDir = Split-Path -Parent $PSScriptRoot; $diagDir = Join-Path -Path $parentDir -ChildPath "AegisPhoenixSuite_Diagnosticos"; if (-not (Test-Path $diagDir)) { New-Item -Path $diagDir -ItemType Directory | Out-Null }; $reportPath = Join-Path -Path $diagDir -ChildPath "Reporte_Salud_$(Get-Date -Format 'yyyy-MM-dd_HH-mm').html"; Write-Host "`n[+] Generando reporte de energia..."; powercfg /energy /output $reportPath /duration 30; if (Test-Path $reportPath) { Write-Host "[OK] Reporte generado en: '$reportPath'" -ForegroundColor Green; Start-Process $reportPath } else { Write-Error "No se pudo generar el reporte." }; Read-Host "`nPresiona Enter para volver..." }

function Show-AdvancedTweaksMenu {
    $tweakChoice = ''; do { Clear-Host; Write-Host "Modulo de Tweaks de Sistema y Rendimiento" -ForegroundColor DarkCyan; Write-Host "--- Rendimiento ---" -ForegroundColor Yellow; Write-Host "   [1] Desactivar Aceleracion del Raton"; Write-Host "   [2] Desactivar VBS para maximo rendimiento"; Write-Host "   [3] Aumentar prioridad de CPU para ventana activa"; Write-Host "--- Productividad ---" -ForegroundColor Yellow; Write-Host "   [4] Anadir 'Abrir en Terminal Windows'"; Write-Host "   [5] Anadir 'Copiar como Ruta de Acceso'"; Write-Host "   [6] Anadir 'Matar Tareas que no Responden'"; Write-Host "--- Comportamiento del Sistema ---" -ForegroundColor Yellow; Write-Host "   [7] Desactivar Almacenamiento Reservado"; Write-Host "   [8] Habilitar Mensajes de Estado Detallados"; Write-Host "   [9] Deshabilitar Copilot (Directiva del Sistema)"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $tweakChoice = Read-Host "Selecciona una opcion"; switch ($tweakChoice) { '1' { Set-ItemProperty -Path 'HKCU:\Control Panel\Mouse' -Name 'MouseSpeed' -Value "0"; Set-ItemProperty -Path 'HKCU:\Control Panel\Mouse' -Name 'MouseThreshold1' -Value "0"; Set-ItemProperty -Path 'HKCU:\Control Panel\Mouse' -Name 'MouseThreshold2' -Value "0"; Write-Host "[OK] Aceleracion del raton desactivada." -ForegroundColor Green } '2' { Write-Warning "ADVERTENCIA: Reduce la seguridad."; if ((Read-Host "Estas seguro? (S/N)").ToUpper() -eq 'S') { bcdedit /set hypervisorlaunchtype off; Write-Host "[OK] VBS desactivado. Requiere reinicio." -ForegroundColor Green } } '3' { New-Item -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl' -Force | Out-Null; Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\PriorityControl' -Name 'Win32PrioritySeparation' -Value 26 -Type DWord -Force; Write-Host "[OK] Prioridad de CPU aumentada. Reinicia para aplicar." -ForegroundColor Green } '4' { $regPath = 'HKCU:\Software\Classes\Directory\Background\shell\wt'; New-Item -Path $regPath -Force | Out-Null; Set-ItemProperty -Path $regPath -Name "(Default)" -Value "Abrir en Terminal Windows"; New-Item -Path "$regPath\command" -Force | Out-Null; Set-ItemProperty -Path "$regPath\command" -Name "(Default)" -Value 'wt.exe -d "%V"'; Write-Host "[OK] 'Abrir en Terminal Windows' anadido." -ForegroundColor Green } '5' { $regPath = 'HKCR\AllFilesystemObjects\shell\CopyAsPath'; New-Item -Path $regPath -Force | Out-Null; Set-ItemProperty -Path $regPath -Name "(Default)" -Value "Copiar como Ruta de Acceso"; New-Item -Path "$regPath\command" -Force | Out-Null; Set-ItemProperty -Path "$regPath\command" -Name "(Default)" -Value 'cmd.exe /c echo "%1"|clip'; Write-Host "[OK] 'Copiar como Ruta de Acceso' anadido." -ForegroundColor Green } '6' { $regPath = 'HKCU:\Software\Classes\DesktopBackground\Shell\KillTasks'; New-Item -Path $regPath -Force | Out-Null; Set-ItemProperty -Path $regPath -Name "(Default)" -Value "Matar Tareas que no Responden"; Set-ItemProperty -Path $regPath -Name "Icon" -Value "imageres.dll,-108"; New-Item -Path "$regPath\command" -Force | Out-Null; Set-ItemProperty -Path "$regPath\command" -Name "(Default)" -Value 'taskkill.exe /f /fi "status eq not responding"'; Write-Host "[OK] 'Matar Tareas' anadido." -ForegroundColor Green } '7' { Write-Warning "Puede causar problemas con actualizaciones si el disco se llena."; dism /Online /Set-ReservedStorageState /State:Disabled; Write-Host "[OK] Almacenamiento reservado desactivado." -ForegroundColor Green } '8' { Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' -Name 'VerboseStatus' -Value 1 -Type DWord -Force; Write-Host "[OK] Mensajes de estado detallados habilitados." -ForegroundColor Green } '9' { $regPath = 'HKCU:\Software\Policies\Microsoft\Windows\WindowsCopilot'; New-Item -Path $regPath -Force | Out-Null; Set-ItemProperty -Path $regPath -Name 'TurnOffWindowsCopilot' -Value 1 -Type DWord -Force; Write-Host "[OK] Copilot deshabilitado a nivel de sistema. Reinicia para aplicar." -ForegroundColor Green } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($tweakChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($tweakChoice -ne 'V')
}
function Show-InventoryMenu {
    $parentDir = Split-Path -Parent $PSScriptRoot; $reportDir = Join-Path -Path $parentDir -ChildPath "AegisPhoenixSuite_Reportes"; if (-not (Test-Path $reportDir)) { New-Item -Path $reportDir -ItemType Directory | Out-Null }; $reportFile = Join-Path -Path $reportDir -ChildPath "Reporte_Inventario_$(Get-Date -Format 'yyyy-MM-dd').txt"; Write-Host "`n[+] Generando reporte en '$reportFile'..." -ForegroundColor Yellow; "--- REPORTE DE HARDWARE ---`n" | Out-File -FilePath $reportFile -Encoding utf8; (Get-ComputerInfo | Select-Object CsName, WindowsProductName, OsHardwareAbstractionLayer, CsProcessors, PhysiscalMemorySize) | Format-List | Out-File -FilePath $reportFile -Append -Encoding utf8; (Get-WmiObject Win32_VideoController | Select-Object Name, AdapterRAM) | Format-List | Out-File -FilePath $reportFile -Append -Encoding utf8; "`n--- REPORTE DE SOFTWARE INSTALADO ---`n" | Out-File -FilePath $reportFile -Append -Encoding utf8; Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* | Select-Object DisplayName, DisplayVersion, InstallDate | Format-Table | Out-File -FilePath $reportFile -Append -Encoding utf8; "`n--- REPORTE DE RED ---`n" | Out-File -FilePath $reportFile -Append -Encoding utf8; (Get-NetAdapter | Select-Object Name, Status, MacAddress, LinkSpeed) | Format-List | Out-File -FilePath $reportFile -Append -Encoding utf8; Write-Host "[OK] Reporte completo generado en la carpeta '$reportDir'." -ForegroundColor Green; Read-Host "`nPresiona Enter para volver..."
}
function Show-DriverMenu {
    $driverChoice = ''; do { Clear-Host; Write-Host "Modulo de Gestion de Drivers" -ForegroundColor DarkCyan; Write-Host "   [1] Copia de Seguridad de TODOS los drivers (Backup)"; Write-Host "   [2] Listar drivers de terceros instalados"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $driverChoice = Read-Host "Selecciona una opcion"; switch ($driverChoice) { '1' { $destPath = Read-Host "Introduce la ruta completa para guardar la copia (ej: C:\MisDrivers)"; if (-not (Test-Path $destPath)) { New-Item -Path $destPath -ItemType Directory | Out-Null }; Write-Host "`n[+] Exportando drivers a '$destPath'..." -ForegroundColor Yellow; Export-WindowsDriver -Online -Destination $destPath; Write-Host "[OK] Copia de seguridad completada." -ForegroundColor Green } '2' { Write-Host "`n[+] Listando drivers no-Microsoft instalados..." -ForegroundColor Yellow; Get-WindowsDriver -Online | Where-Object { $_.ProviderName -ne 'Microsoft' } | Format-Table ProviderName, ClassName, Date, Version -AutoSize } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($driverChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($driverChoice -ne 'V')
}
function Show-AdminMenu {
    $adminChoice = ''; do { Clear-Host; Write-Host "Modulo de Administracion de Sistema" -ForegroundColor DarkCyan; Write-Host "   [1] Limpiar Registros de Eventos de Windows"; Write-Host "   [2] Analizar Tareas Programadas de Terceros"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $adminChoice = Read-Host "Selecciona una opcion"; switch ($adminChoice) { '1' { if ((Read-Host "ADVERTENCIA: Esto eliminara los registros de eventos. Estas seguro? (S/N)").ToUpper() -eq 'S') { $logs = @("Application", "Security", "System", "Setup"); foreach ($log in $logs) { Clear-EventLog -LogName $log; Write-Host "[OK] Registro '$log' limpiado." -ForegroundColor Green } } } '2' { Write-Host "`n[+] Tareas programadas de terceros activas:" -ForegroundColor Yellow; Get-ScheduledTask | Where-Object { $_.Principal.GroupId -ne 'S-1-5-18' -and $_.State -eq 'Ready' } | Select-Object TaskName, State, Trigger | Format-Table -AutoSize } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($adminChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($adminChoice -ne 'V')
}
function Show-SoftwareMenu {
    $softwareChoice = ''; do { Clear-Host; Write-Host "Modulo de Gestion de Software" -ForegroundColor DarkCyan; Write-Host "   [1] Actualizar TODO el software instalado (via Winget)"; Write-Host "   [2] Instalar software en masa desde un archivo de texto"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $softwareChoice = Read-Host "Selecciona una opcion"; switch ($softwareChoice) { '1' { Write-Host "`n[+] Buscando actualizaciones..." -ForegroundColor Yellow; try { winget upgrade --all --silent --accept-package-agreements --accept-source-agreements; Write-Host "[OK] Proceso de actualizacion completado." -ForegroundColor Green } catch { Write-Error "Error con Winget." } } '2' { $filePath = Read-Host "Introduce la ruta completa al archivo .txt"; if (Test-Path $filePath) { $programs = Get-Content $filePath; foreach ($program in $programs) { Write-Host "`n[+] Instalando '$program'..." -ForegroundColor Yellow; winget install --id $program --silent --accept-package-agreements --accept-source-agreements }; Write-Host "[OK] Proceso completado." -ForegroundColor Green } else { Write-Error "Archivo no encontrado." } } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($softwareChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($softwareChoice -ne 'V')
}
function Show-SecurityMenu {
    $securityChoice = ''; do { Clear-Host; Write-Host "Modulo de Refuerzo de Seguridad" -ForegroundColor DarkCyan; Write-Host "   [1] Activar Proteccion contra Ransomware"; Write-Host "   [2] Deshabilitar protocolo inseguro SMBv1"; Write-Host "   [3] Deshabilitar PowerShell v2.0 (Recomendado)"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $securityChoice = Read-Host "Selecciona una opcion"; switch ($securityChoice) { '1' { Set-MpPreference -EnableControlledFolderAccess Enabled; Write-Host "[OK] Proteccion contra Ransomware activada." -ForegroundColor Green } '2' { Disable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol -NoRestart -ErrorAction SilentlyContinue; Write-Host "[OK] SMBv1 deshabilitado. Requiere reinicio." -ForegroundColor Green } '3' { Disable-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2 -NoRestart -ErrorAction SilentlyContinue; Disable-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2Root -NoRestart -ErrorAction SilentlyContinue; Write-Host "[OK] PowerShell v2.0 deshabilitado. Requiere reinicio." -ForegroundColor Green } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($securityChoice -ne 'V') { Read-Host "`nPresiona Enter para continuar..." } } while ($securityChoice -ne 'V')
}
function Show-UICustomizationMenu {
    $uiChoice = ''; do { Clear-Host; Write-Host "Modulo de Personalizacion Avanzada de UI" -ForegroundColor DarkCyan; Write-Host "   [1] Alinear Barra de Tareas a la Izquierda"; Write-Host "   [2] Alinear Barra de Tareas al Centro (Default)"; Write-Host "   [3] Restaurar Explorador de Archivos de Win10"; Write-Host "   [4] Restaurar Explorador de Archivos de Win11"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $uiChoice = Read-Host "Selecciona una opcion"; switch ($uiChoice) { '1' { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAl' -Value 0 -Force; Write-Host "[OK] Barra de tareas a la izquierda." -ForegroundColor Green } '2' { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'TaskbarAl' -Value 1 -Force; Write-Host "[OK] Barra de tareas al centro." -ForegroundColor Green } '3' { $regPath = "HKCU:\Software\Classes\CLSID\{d93ed569-3b3e-4bff-8355-3c44f6a52bb5}\InprocServer32"; New-Item -Path $regPath -Force | Out-Null; Set-ItemProperty -Path $regPath -Name "(Default)" -Value "" -Type String -Force; Write-Host "[OK] Explorador de Win10 activado." -ForegroundColor Green } '4' { $regPath = "HKCU:\Software\Classes\CLSID\{d93ed569-3b3e-4bff-8355-3c44f6a52bb5}"; if (Test-Path $regPath) { Remove-Item -Path $regPath -Recurse -Force }; Write-Host "[OK] Explorador de Win11 restaurado." -ForegroundColor Green } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($uiChoice -ne 'V') { Write-Host "`n[INFO] Reiniciando el Explorador..." -ForegroundColor Gray; Stop-Process -Name explorer -Force; Read-Host "`nPresiona Enter..." } } while ($uiChoice -ne 'V')
}
function Show-PrivacyMenu {
    $privacyChoice = ''; do { Clear-Host; Write-Host "Modulo de Privacidad" -ForegroundColor DarkCyan; Write-Host "   [1] Desactivar ID de publicidad para apps"; Write-Host "   [2] Desactivar seguimiento de ubicacion"; Write-Host "   [3] Desactivar sugerencias y contenido promocionado"; Write-Host "   [4] Limitar envio de datos de escritura"; Write-Host ""; Write-Host "   [V] Volver..." -ForegroundColor Red; $privacyChoice = Read-Host "Selecciona una opcion"; switch ($privacyChoice) { '1' { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\AdvertisingInfo' -Name 'Enabled' -Value 0 -Force; Write-Host "[OK] ID de publicidad desactivado." -ForegroundColor Green } '2' { New-Item -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors' -Force -ErrorAction SilentlyContinue | Out-Null; Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors' -Name 'DisableLocation' -Value 1 -Type DWord -Force; Write-Host "[OK] Seguimiento de ubicacion desactivado." -ForegroundColor Green } '3' { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SubscribedContent-3b3e-4bff-8355-3c44f6a52bb5' -Value 0 -Force; Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager' -Name 'SilentInstalledAppsEnabled' -Value 0 -Force; Write-Host "[OK] Sugerencias desactivadas." -ForegroundColor Green } '4' { Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Input\Settings' -Name 'IsInputPersonalizationEnabled' -Value 0 -Type DWord -Force; Write-Host "[OK] Envio de datos de escritura limitado." -ForegroundColor Green } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red } }; if ($privacyChoice -ne 'V') { Read-Host "`nPresiona Enter..." } } while ($privacyChoice -ne 'V')
}


function Show-OptimizationMenu {
    $optimChoice = ''; do { Clear-Host; Write-Host "Modulo de Optimizacion y Limpieza" -ForegroundColor DarkCyan; Write-Host "   [1] Desactivar Servicios Innecesarios (Estandar)"; Write-Host "       (Libera memoria RAM y recursos del sistema)"; Write-Host "   [2] Desactivar Servicios Opcionales (Avanzado)"; Write-Host "       (Para funciones especificas como Escritorio Remoto)"; Write-Host "   [3] Modulo de Limpieza Profunda"; Write-Host "       (Libera espacio en disco eliminando archivos basura)"; Write-Host "   [4] Eliminar Apps Preinstaladas (Dinamico)"; Write-Host "       (Detecta y te permite elegir que bloatware quitar)"; Write-Host ""; Write-Host "   [V] Volver al menu principal" -ForegroundColor Red; $optimChoice = Read-Host "Selecciona una opcion"; switch ($optimChoice.ToUpper()) { '1' { Disable-UnnecessaryServices } '2' { Show-OptionalServicesMenu } '3' { Show-CleaningMenu } '4' { Show-BloatwareMenu } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red; Read-Host } } } while ($optimChoice.ToUpper() -ne 'V')
}

function Show-MaintenanceMenu {
    $maintChoice = ''; do { Clear-Host; Write-Host "Modulo de Mantenimiento y Reparacion" -ForegroundColor DarkCyan; Write-Host "   [1] Verificar y Reparar Archivos del Sistema (SFC/DISM)"; Write-Host "       (Soluciona errores de sistema, cuelgues y pantallas azules)"; Write-Host "   [2] Limpiar Caches de Sistema (DNS, Tienda, etc.)"; Write-Host "       (Resuelve problemas de conexion a internet y de la Tienda Windows)"; Write-Host "   [3] Optimizar Unidades (Desfragmentar/TRIM)"; Write-Host "       (Mejora la velocidad de lectura y la vida util de tus discos)"; Write-Host "   [4] Generar Reporte de Salud del Sistema (Energia)"; Write-Host "       (Diagnostica problemas de bateria y consumo de energia)"; Write-Host ""; Write-Host "   [V] Volver al menu principal" -ForegroundColor Red; $maintChoice = Read-Host "Selecciona una opcion"; switch ($maintChoice.ToUpper()) { '1' { Repair-SystemFiles } '2' { Clear-SystemCaches } '3' { Optimize-Drives } '4' { Generate-SystemReport } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red; Read-Host } } } while ($maintChoice.ToUpper() -ne 'V')
}

function Show-AdvancedMenu {
    $advChoice = ''; do { Clear-Host; Write-Host "Herramientas Avanzadas" -ForegroundColor DarkCyan; Write-Host "   [T] Tweaks de Sistema y Rendimiento"; Write-Host "       (Ajustes finos para gaming, productividad y comportamiento del sistema)"; Write-Host "   [I] Inventario y Reportes del Sistema"; Write-Host "       (Genera un informe detallado del hardware y software de tu PC)"; Write-Host "   [D] Gestion de Drivers (Backup/Listar)"; Write-Host "       (Crea una copia de seguridad de tus drivers, esencial para reinstalar Windows)"; Write-Host "   [L] Gestion de Logs y Tareas Programadas"; Write-Host "       (Herramientas para depuracion y analisis avanzado)"; Write-Host "   [W] Gestion de Software (Winget)"; Write-Host "       (Actualiza e instala todas tus aplicaciones facilmente)"; Write-Host "   [H] Refuerzo de Seguridad (Hardening)"; Write-Host "       (Aplica configuraciones para hacer tu sistema mas resistente a ataques)"; Write-Host "   [U] Personalizacion Avanzada de UI"; Write-Host "       (Modifica la apariencia de Windows 11 a tu gusto)"; Write-Host "   [P] Privacidad"; Write-Host "       (Reduce la cantidad de datos que tu sistema envia a Microsoft)"; Write-Host ""; Write-Host "   [V] Volver al menu principal" -ForegroundColor Red; $advChoice = Read-Host "Selecciona una opcion"; switch ($advChoice.ToUpper()) { 'T' { Show-AdvancedTweaksMenu } 'I' { Show-InventoryMenu } 'D' { Show-DriverMenu } 'L' { Show-AdminMenu } 'W' { Show-SoftwareMenu } 'H' { Show-SecurityMenu } 'U' { Show-UICustomizationMenu } 'P' { Show-PrivacyMenu } 'V' { continue }; default { Write-Host "[ERROR] Opcion no valida." -ForegroundColor Red; Read-Host } } } while ($advChoice.ToUpper() -ne 'V')
}


# --- BUCLE PRINCIPAL DEL SCRIPT ---
$mainChoice = ''
do {
    Clear-Host
    Write-Host "=======================================================" -ForegroundColor Cyan
    Write-Host "        Aegis Phoenix Suite v1.0 by SOFTMAXTER        " -ForegroundColor Cyan
    Write-Host "=======================================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "   [1] Crear Punto de Restauracion" -ForegroundColor White
    Write-Host "       (Tu red de seguridad. ¡Usar siempre antes de hacer cambios!)" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   [2] Modulo de Optimizacion y Limpieza" -ForegroundColor Green
    Write-Host "       (Mejora el rendimiento y libera espacio en disco)" -ForegroundColor Gray
    Write-Host "   [3] Modulo de Mantenimiento y Reparacion" -ForegroundColor Green
    Write-Host "       (Soluciona problemas y diagnostica el estado de tu sistema)" -ForegroundColor Gray
    Write-Host "   [4] Herramientas Avanzadas" -ForegroundColor Yellow
    Write-Host "       (Accede a todos los modulos de personalizacion, seguridad y gestion)" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   [S] Salir del script" -ForegroundColor Red
    Write-Host ""

    $mainChoice = Read-Host "Selecciona una opcion y presiona Enter"

    switch ($mainChoice.ToUpper()) {
        '1' { Create-RestorePoint }
        '2' { Show-OptimizationMenu }
        '3' { Show-MaintenanceMenu }
        '4' { Show-AdvancedMenu }
        'S' { Write-Host "`nGracias por usar Aegis Phoenix Suite by SOFTMAXTER!" }
        default {
            Write-Host "`n[ERROR] Opcion no valida. Por favor, intenta de nuevo." -ForegroundColor Red
            Read-Host "`nPresiona Enter para continuar..."
        }
    }

} while ($mainChoice.ToUpper() -ne 'S')
